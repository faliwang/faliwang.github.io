{"version":3,"sources":["logo.svg","App.js","Counter.js","Userlist.js","Clock.js","serviceWorker.js","index.js"],"names":["module","exports","App","Counter","useState","count","setCount","className","class","onClick","Userlist","users","setUsers","name","setName","useEffect","keyListener","e","isComposing","keyCode","code","addUser","window","addEventListener","removeEventListener","style","width","margin","map","user","idx","key","marginTop","htmlFor","id","type","value","onChange","target","Clock","props","state","time","Date","toLocaleTimeString","this","intervalID","setInterval","updateClock","clearInterval","setState","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,0OCyB5BC,I,OC0CAC,G,YA9DC,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACXC,EADW,KACJC,EADI,KAiBlB,OACI,yBAAKC,UAAU,WACX,uFACA,4BAAKF,GACL,yBAAKG,MAAM,cACP,4BAAQA,MAAM,YAAYC,QAnB1B,WACRH,EAASD,EAAQ,KAkBT,KACA,4BAAQG,MAAM,YAAYC,QAhBxB,WACNJ,EAAQ,GACRC,EAASD,EAAQ,KAcb,KACA,4BAAQG,MAAM,YAAYC,QAXxB,WACVH,EAAS,KAUD,a,QCUDI,G,MApCE,WAAO,IAAD,EACON,mBAAS,IADhB,mBACZO,EADY,KACLC,EADK,OAEKR,mBAAS,IAFd,mBAEZS,EAFY,KAENC,EAFM,KAoBnB,OAZAC,qBAAU,WACN,IAAMC,EAAc,SAACC,GACbA,EAAEC,aAA6B,MAAdD,EAAEE,SACH,UAAXF,EAAEG,MAPH,SAACP,GACbD,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KAOZQ,CAAQR,IAKhB,OADAS,OAAOC,iBAAiB,UAAWP,GAC5B,WAAOM,OAAOE,oBAAoB,UAAWR,OAIpD,yBAAKT,UAAU,YACX,uDACA,yCACA,uDACA,wBAAIkB,MAAO,CAACC,MAAO,QAASC,OAAQ,SAC/BhB,EAAMiB,KAAI,SAACC,EAAMC,GAAP,OAAe,wBAAIC,IAAKD,GAAMD,OAE7C,yBAAKJ,MAAO,CAACO,UAAW,SACpB,2BAAOC,QAAQ,QAAf,WACA,2BAAOC,GAAG,OAAOC,KAAK,OAAOC,MAAOvB,EAAMwB,SAAU,SAAApB,GAAC,OAAIH,EAAQG,EAAEqB,OAAOF,c,gCCE3EG,G,wDA/BX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,MAAM,IAAIC,MAAOC,sBAJP,E,gEASG,IAAD,OAChBC,KAAKC,WAAaC,aAAY,kBAAM,EAAKC,gBAAe,O,6CAInCC,cAAcJ,KAAKC,c,oCAIxCD,KAAKK,SAAS,CAAER,MAAM,IAAIC,MAAOC,yB,+BAIjC,OACI,yBAAKrC,UAAU,SACX,yBAAKA,UAAU,QACX,+BAAKsC,KAAKJ,MAAMC,Y,GA1BhBS,c,MCSAC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yEACA,0DACA,kBAAC,EAAD,MACA,6BAAM,6BAAM,6BAAM,6BAAM,6BACxB,kBAAC,EAAD,MACA,6BAAM,6BAAM,6BAAM,6BAAM,6BACxB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba91e4a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\r\nimport ButtonExampleGroup from './Button';\r\nimport './Counter.css';\r\n\r\n\r\nconst Counter = () => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    const add = () => {\r\n        setCount(count + 1);\r\n    }\r\n\r\n    const minus = () => {\r\n        if (count > 0){\r\n            setCount(count - 1);\r\n        }\r\n    }\r\n\r\n    const reset = () =>{\r\n        setCount(0);\r\n    }\r\n    \r\n    return(\r\n        <div className=\"Counter\">\r\n            <p> I made a counter for fun. Please enjoy the cute button.</p>\r\n            <h1>{count}</h1>\r\n            <div class=\"ui buttons\">\r\n                <button class=\"ui button\" onClick={add}>+</button>\r\n                <button class=\"ui button\" onClick={minus}>-</button>\r\n                <button class=\"ui button\" onClick={reset}>Reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/*\r\nclass Counter extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { count: 0 };\r\n    }\r\n\r\n    add = () =>{\r\n        this.setState((state) => ({count: state.count+1}));\r\n    }\r\n\r\n    minus = () =>{\r\n        this.setState((state) => ({count: state.count-1}));\r\n    }\r\n\r\n    reset = () =>{\r\n        this.setState({count: 0});\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"Counter\">\r\n                <h1>{this.state.count} </h1>\r\n                <Button text=\"+\" onClick={this.add} />\r\n                <Button text=\"-\" onClick={this.minus} />\r\n                <Button text=\"Reset\" onClick={this.reset} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\nexport default Counter;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Userlist.css';\r\n\r\nconst Userlist = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const addUser = (name) => {\r\n        setUsers([...users, name]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const keyListener = (e) => {\r\n            if (e.isComposing || e.keyCode === 229) return;\r\n            else if (e.code === \"Enter\"){\r\n                addUser(name);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', keyListener);\r\n        return () => {window.removeEventListener('keydown', keyListener)};\r\n    })\r\n\r\n    return(\r\n        <div className=\"Userlist\">\r\n            <p>I also made a user-list.</p>\r\n            <h1>User List</h1>\r\n            <h5>按Enter新增</h5>\r\n            <ul style={{width: \"300px\", margin: \"auto\"}}>\r\n                {users.map((user, idx) => <li key={idx}>{user}</li>)}\r\n            </ul>\r\n            <div style={{marginTop: \"30px\"}}>\r\n                <label htmlFor=\"name\">Name:  </label>\r\n                <input id=\"name\" type=\"text\" value={name} onChange={e => setName(e.target.value)}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Userlist;","import React, { Component } from 'react';\r\nimport './Clock.css';\r\n\r\nclass Clock extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        //This declared the state of time at the very beginning\r\n        this.state = {\r\n            time: new Date().toLocaleTimeString()\r\n        }\r\n    };\r\n\r\n    //This happens when the component mount and the setInterval function get called with a call back function updateClock()\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(() => this.updateClock(), 1000 );\r\n    };\r\n\r\n    //This section clears setInterval by calling intervalID so as to optimise memory\r\n    componentWillUnmount(){  clearInterval(this.intervalID)   };\r\n\r\n    //This function set the state of the time to a new time\r\n    updateClock(){\r\n        this.setState({ time: new Date().toLocaleTimeString() });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"clock\">\r\n                <div className=\"Time\">\r\n                    <p> {this.state.time}</p>\r\n                </div>\r\n            </div>\r\n    );}\r\n}\r\n\r\nexport default Clock;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Counter from './Counter';\nimport Userlist from './Userlist';\nimport Clock from './Clock';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1> Welcome to  王凡林's website</h1>\n    <p> My student ID is B07502100</p>\n    <Counter /> \n    <br /><br /><br /><br /><br />\n    <Userlist />\n    <br /><br /><br /><br /><br />\n    <Clock />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}